<?xml version="1.0" ?>
<robot name="turtlebot3_waffle" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- 색상 정의 -->
  <material name="black"><color rgba="0.0 0.0 0.0 1.0"/></material>
  <material name="dark"><color rgba="0.3 0.3 0.3 1.0"/></material>
  <material name="light_black"><color rgba="0.4 0.4 0.4 1.0"/></material>
  <material name="blue"><color rgba="0.0 0.0 0.8 1.0"/></material>
  <material name="green"><color rgba="0.0 0.8 0.0 1.0"/></material>
  <material name="grey"><color rgba="0.5 0.5 0.5 1.0"/></material>
  <material name="orange"><color rgba="1.0 0.4235 0.0392 1.0"/></material>
  <material name="brown"><color rgba="0.8706 0.8118 0.7647 1.0"/></material>
  <material name="red"><color rgba="0.8 0.0 0.0 1.0"/></material>
  <material name="white"><color rgba="1.0 1.0 1.0 1.0"/></material>

  <!-- Base -->
  <link name="base_footprint"/>
  
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0 0 0.010" rpy="0 0 0"/>
  </joint>

  <link name="base_link">
    <visual>
      <origin xyz="-0.064 0 0.0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://turtlebot3_description/meshes/bases/waffle_base.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="light_black"/>
    </visual>
    <collision>
      <origin xyz="-0.064 0 0.047" rpy="0 0 0"/>
      <geometry>
        <box size="0.266 0.266 0.094"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.01" ixy="0.0" ixz="0.0"
               iyy="0.01" iyz="0.0" izz="0.01"/>
    </inertial>
  </link>

  <!-- Left Wheel -->
  <joint name="wheel_left_joint" type="continuous">
    <parent link="base_link"/>
    <child link="wheel_left_link"/>
    <origin xyz="0.0 0.144 0.023" rpy="-1.57 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <link name="wheel_left_link">
    <visual>
      <origin xyz="0 0 0" rpy="1.57 0 0"/>
      <geometry>
        <mesh filename="package://turtlebot3_description/meshes/wheels/left_tire.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="dark"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.018" radius="0.033"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0"
               iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>

  <!-- Right Wheel -->
  <joint name="wheel_right_joint" type="continuous">
    <parent link="base_link"/>
    <child link="wheel_right_link"/>
    <origin xyz="0.0 -0.144 0.023" rpy="-1.57 0 0"/>
    <axis xyz="0 0 1"/>
  </joint>

  <link name="wheel_right_link">
    <visual>
      <origin xyz="0 0 0" rpy="1.57 0 0"/>
      <geometry>
        <mesh filename="package://turtlebot3_description/meshes/wheels/right_tire.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="dark"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.018" radius="0.033"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0"
               iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>

  <!-- Caster Wheels -->
  <joint name="caster_back_right_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_back_right_link"/>
    <origin xyz="-0.177 -0.064 -0.004" rpy="-1.57 0 0"/>
  </joint>
  
  <link name="caster_back_right_link">
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
               iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <joint name="caster_back_left_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_back_left_link"/>
    <origin xyz="-0.177 0.064 -0.004" rpy="-1.57 0 0"/>
  </joint>
  
  <link name="caster_back_left_link">
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
               iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- 2D LiDAR -->
  <joint name="scan_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_scan"/>
    <origin xyz="-0.064 0 0.122" rpy="0 0 0"/>
  </joint>
  
  <link name="base_scan">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.0315" radius="0.055"/>
      </geometry>
      <material name="dark"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.0315" radius="0.055"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.114"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0"
               iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>

  <!-- 2D LiDAR Gazebo Plugin -->
  <gazebo reference="base_scan">
    <sensor type="ray" name="lds_lfcd_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>0.0</min_angle>
            <max_angle>6.28319</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.12</min>
          <max>3.5</max>
          <resolution>0.015</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_lds_lfcd_controller" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=/scan</remapping>
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>base_scan</frame_name>
      </plugin>
    </sensor>
  </gazebo>

    <!-- Left Front Camera (왼쪽 눈) -->
  <joint name="camera_left_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_left_link"/>
    <origin xyz="0.12 0.05 0.25" rpy="0 0 0"/>
  </joint>
  
  <link name="camera_left_link">
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
               iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <gazebo reference="camera_left_link">
    <sensor type="camera" name="camera_left">
      <update_rate>30</update_rate>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image><width>640</width><height>480</height><format>R8G8B8</format></image>
        <clip><near>0.02</near><far>50</far></clip>
      </camera>
      <plugin name="camera_left_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <remapping>image_raw:=/camera_left/image_raw</remapping>
          <remapping>camera_info:=/camera_left/camera_info</remapping>
        </ros>
        <camera_name>camera_left</camera_name>
        <frame_name>camera_left_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Right Front Camera (오른쪽 눈) -->
  <joint name="camera_right_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_right_link"/>
    <origin xyz="0.12 -0.05 0.25" rpy="0 0 0"/>
  </joint>
  
  <link name="camera_right_link">
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
               iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <gazebo reference="camera_right_link">
    <sensor type="camera" name="camera_right">
      <update_rate>30</update_rate>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image><width>640</width><height>480</height><format>R8G8B8</format></image>
        <clip><near>0.02</near><far>50</far></clip>
      </camera>
      <plugin name="camera_right_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <remapping>image_raw:=/camera_right/image_raw</remapping>
          <remapping>camera_info:=/camera_right/camera_info</remapping>
        </ros>
        <camera_name>camera_right</camera_name>
        <frame_name>camera_right_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- 3D LiDAR (Velodyne VLP-16) -->
  <joint name="velodyne_joint" type="fixed">
    <parent link="base_link"/>
    <child link="velodyne_link"/>
    <origin xyz="0 0 0.35" rpy="0 0 0"/>
  </joint>

  <link name="velodyne_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.05"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.07" radius="0.05"/>
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.83"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0"
               iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>

  <!-- 3D LiDAR Gazebo Plugin -->
  <gazebo reference="velodyne_link">
    <sensor type="ray" name="velodyne_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>440</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
          <vertical>
            <samples>16</samples>
            <resolution>1</resolution>
            <min_angle>-0.261799</min_angle>
            <max_angle>0.261799</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.5</min>
          <max>100.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_velodyne" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <remapping>~/out:=/velodyne_points</remapping>
        </ros>
        <output_type>sensor_msgs/PointCloud2</output_type>
        <frame_name>velodyne_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Diff Drive Plugin -->
  <gazebo>
    <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
      <update_rate>30</update_rate>
      <left_joint>wheel_left_joint</left_joint>
      <right_joint>wheel_right_joint</right_joint>
      <wheel_separation>0.288</wheel_separation>
      <wheel_diameter>0.066</wheel_diameter>
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>false</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
    </plugin>
  </gazebo>

</robot>